a) For each customer X, identify the customer Y (or the costumers) that share at least 3
terminals in which Y executes transactions and the spending amount of Y differs less than
the 10% with respect to that of X. Return the name of X, the spending amount of X, the
spending amount of the related costumer Y and the spending amount of Y.

MATCH (x:Customer)-[:ACCESS_TO]->(t:Terminal)<-[:TRANSACTION]-(y:Customer)
WHERE x <> y
WITH x, y, COUNT(DISTINCT t) AS shared_terminals
WHERE shared_terminals >= 3
WITH x, y

MATCH (x)-[tx_x:TRANSACTION]->(t:Terminal)<-[tx_y:TRANSACTION]-(y)
WITH x, y, SUM(tx_x.amount) AS amount_x, SUM(tx_y.amount) AS amount_y
WHERE ABS(amount_x - amount_y) / amount_x < 0.1
RETURN x.customer_id AS customer_x, amount_x, y.customer_id AS customer_y, amount_y

b) For each terminal identify the possible fraudulent transactions of the current month. The
fraudulent transactions are those whose import is higher than 20% of the average import of
the transactions executed on the same terminal in the previous month.

WITH date() AS current_date, date() - duration({months: 1}) AS prev_month_date

// Trova tutte le transazioni del mese precedente per ciascun terminal
MATCH (t:Terminal)<-[tx:TRANSACTION]-(:Customer)
WITH t, tx, date(tx.datetime) AS tx_datetime, current_date, prev_month_date
WHERE tx_datetime >= prev_month_date AND tx_datetime < current_date
WITH t, AVG(tx.amount) AS avg_amount_last_month, current_date

// Trova tutte le transazioni del mese corrente per ciascun terminale
MATCH (t)<-[tx:TRANSACTION]-(:Customer)
WITH t, avg_amount_last_month, current_date, tx, date(tx.datetime) as tx_datetime
WHERE tx_datetime = current_date
WITH t, avg_amount_last_month, tx

// Filtra le transazioni fraudolente (importo maggiore del 20% della media precedente)
WHERE tx.amount - avg_amount_last_month / avg_amount_last_month > 0.2
RETURN t.terminal_id AS terminal_id, COLLECT(tx.transaction_id) AS possible_fraudulent_transaction

c) Given a user u, determine the “co-customer-relationships CC of degree k”. A user u’ is a co-customer of u if you
can determine a chain “u1-t1-u2-t2-…tk-1-uk“ such that u1=u, uk=u’, and for each 1<=I,j<=k, ui <> uj, and t1,..tk-1
are the terminals on which a transaction has been executed.
Therefore, CCk(u)={u’| a chain exists between u and u’ of degree k}. Please, note that depending on the adopted model,
the computation of CCk(u) could be quite complicated.
Consider therefore at least the computation of CC3(u) (i.e. the co-costumer relationships of degree 3).

MATCH (u1:Customer {customer_id: 0})-[:TRANSACTION]->(:Terminal)<-[:TRANSACTION]-(u2:Customer)
WHERE u1.customer_id <> u2.customer_id
WITH DISTINCT u2, [u1.customer_id, u2.customer_id] as path_customers

MATCH (u2)-[:TRANSACTION]->(:Terminal)<-[:TRANSACTION]-(u3:Customer)
WHERE NOT u3.customer_id IN path_customers
WITH DISTINCT u3, path_customers + u3.customer_id as path_customers

MATCH (u3)-[:TRANSACTION]->(:Terminal)<-[:TRANSACTION]-(u4:Customer)
WHERE NOT u4.customer_id IN path_customers
WITH DISTINCT u4, path_customers + u4.customer_id as path_customers

...

RETURN DISTINCT uk AS co_customer